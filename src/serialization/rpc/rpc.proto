syntax = "proto3";

package rpc;

import "src/serialization/google_protos/any.proto";
import "src/serialization/google_protos/empty.proto";

/*
* RPC statuses
*/

enum MsgType {
    CALL = 0;
    REPLY = 1;
}

enum ReplyStat {
    MSG_ACCEPTED = 0;
    MSG_DENIED = 1;
}

enum AcceptStat {
    SUCCESS = 0;        // RPC executed successfully
    PROG_UNAVAIL = 1;   // remote hasn't exported program
    PROG_MISMATCH = 2;  // remote can't support version
    PROC_UNAVAIL = 3;   // program can't support procedure
    GARBAGE_ARGS = 4;   // procedure can't decode params
    SYSTEM_ERR = 5;     // memory allocation failure
}

enum RejectStat {
    RPC_MISMATCH = 0;   // RPC version number != 2
    AUTH_ERROR = 1;     // remote can't authenticate caller
}

/*
* Authentication
*/

enum AuthStat {
    AUTH_OK = 0;

    // failed at remote end
    AUTH_BADCRED      = 1;      // bad credential (seal broken)
    AUTH_REJECTEDCRED = 2;      // client must begin new session
    AUTH_BADVERF      = 3;      // bad verifier (seal broken)
    AUTH_REJECTEDVERF = 4;      // verifier expired or replayed
    AUTH_TOOWEAK      = 5;      // rejected for security reasons (e.g. server received AUTH_NONE credential but AUTH_SYS is required for this procedure)

    // failed locally
    AUTH_INVALIDRESP  = 6;      // bogus response verifier
    AUTH_FAILED       = 7;      // reason unknown

    // AUTH_KERB errors; deprecated.  See [RFC2695]
    AUTH_KERB_GENERIC = 8;      // kerberos generic error
    AUTH_TIMEEXPIRE = 9;        // time of credential expired
    AUTH_TKT_FILE = 10;         // problem with ticket file
    AUTH_DECODE = 11;           // can't decode authenticator
    AUTH_NET_ADDR = 12;         // wrong net address in ticket

    // RPCSEC_GSS GSS related errors
    RPCSEC_GSS_CREDPROBLEM = 13; // no credentials for user
    RPCSEC_GSS_CTXPROBLEM = 14;  // problem with context
}

enum AuthFlavor {
    AUTH_NONE  = 0;
    AUTH_SYS   = 1;
    AUTH_SHORT = 2;
    AUTH_DH    = 3;
    RPCSEC_GSS = 6;
}

/*
* AUTH_SYS messages
*/

message AuthSysParams {
    uint64 timestamp = 1;
    string machinename = 2;     // max length 255
    uint32 uid = 3;             // effective uid
    uint32 gid = 4;             // effective gid
    repeated uint32 gids = 5;   // array of gids (max 16) of groups the client belongs to
}

message OpaqueAuth {
    AuthFlavor flavor = 1;

    oneof body {
        google.protobuf.Empty empty = 2;    // case AUTH_NONE
        AuthSysParams auth_sys = 3;         // case AUTH_SYS
    }
}

/*
* RPC structures
*/

message CallBody {
    uint32 rpcvers = 1;  // RPC version number (must be 2)
    uint32 prog = 2;     // RPC program number
    uint32 vers = 3;     // version number of the program
    uint32 proc = 4;     // procedure number

    OpaqueAuth credential = 5;
    OpaqueAuth verifier = 6;

    // procedure-specific serialized parameters
    google.protobuf.Any params = 7;
}

message MismatchInfo {
    uint32 low = 1;
    uint32 high = 2;
}

message AcceptedReply {
    OpaqueAuth verifier = 1;

    AcceptStat stat = 2;

    oneof reply_data {
        google.protobuf.Any results = 3;        // case SUCCESS
        MismatchInfo mismatch_info = 4;         // case PROG_MISMATCH
        google.protobuf.Empty default_case = 5; // default case
    }
}

message RejectedReply {
    RejectStat stat = 1;

    oneof reply_data {
        MismatchInfo mismatch_info = 2; // case RPC_MISMATCH
        AuthStat auth_stat = 3;         // case AUTH_ERROR
    }
}

message ReplyBody {
    ReplyStat stat = 1;

    oneof reply {
        AcceptedReply areply = 2; // case MSG_ACCEPTED
        RejectedReply rreply = 3; // case MSG_DENIED
    }
}

message RpcMsg {
    uint32 xid = 1;
    MsgType mtype = 2;

    oneof body {
        CallBody cbody = 3;  // case CALL
        ReplyBody rbody = 4; // case REPLY
    }
}
